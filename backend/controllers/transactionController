const transactionModel = require("../models/transactionModel");
const moment = require("moment");

const getAllTransaction = async (req, res) => {
  try {
    const { frequency, selectedDate, Type, userid } = req.body;

    const query = { userid };

    // Add date filtering logic
    if (frequency !== "All") {
      if (frequency !== "custom") {
        query.Date = {
          $gt: moment().subtract(Number(frequency), "d").toDate(),
        };
      } else {
        query.Date = {
          $gte: new Date(selectedDate[0]),
          $lte: new Date(selectedDate[1]),
        };
      }
    }

    // Add type filtering if not "All"
    if (Type !== "All") {
      query.Type = Type;
    }

    // Fetch transactions
    const transactions = await transactionModel.find(query);

    return res.status(200).json(transactions);
  } catch (error) {
    console.error(error);
    return res.status(500).json(error);
  }
};

const deleteTransaction = async (req, res) => {
  try {
    await transactionModel.findOneAndDelete({ _id: req.body.transactionId });
    res.status(200).send("Transaction Deleted Successfully");
  } catch (error) {
    console.log(error);
    res.status(500).json(error);
  }
};

const editTransaction = async (req, res) => {
  try {
    await transactionModel.findOneAndUpdate(
      { _id: req.body.transactionId },
      req.body.payload
    );
    res.status(200).send("Edit SUccessfully");
  } catch (error) {
    console.log(error);
    res.status(500).json(error);
  }
};

const addTransaction = async (req, res) => {
  try {
    const newTransaction = new transactionModel(req.body);
    await newTransaction.save();
    return res.status(201).send("Transaction Created");
  } catch (error) {
    console.log(error);
    return res.status(500).json(error);
  }
};

module.exports = {
  getAllTransaction,
  addTransaction,
  editTransaction,
  deleteTransaction,
};
