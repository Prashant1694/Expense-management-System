const transactionModel = require("../models/transactionModel");
const moment = require("moment");
const User = require("../models/users");

const getAllTransaction = async (req, res) => {
  try {
    const { frequency, selectedDate, Type, userid } = req.body;

    const query = { userid };
    if (frequency !== "All") {
      if (frequency !== "custom") {
        query.Date = {
          $gt: moment().subtract(Number(frequency), "d").toDate(),
        };
      } else {
        query.Date = {
          $gte: new Date(selectedDate[0]),
          $lte: new Date(selectedDate[1]),
        };
      }
    }
    if (Type !== "All") {
      query.Type = Type;
    }
    const transactions = await transactionModel.find(query);
    return res.status(200).json(transactions);
  } catch (error) {
    console.error(error);
    return res.status(500).json(error);
  }
};

const deleteTransaction = async (req, res) => {
  try {
    await transactionModel.findOneAndDelete({ _id: req.body.transactionId });
    res.status(200).send("Transaction Deleted Successfully");
  } catch (error) {
    console.log(error);
    res.status(500).json(error);
  }
};

const editTransaction = async (req, res) => {
  try {
    await transactionModel.findOneAndUpdate(
      { _id: req.body.transactionId },
      req.body.payload
    );
    res.status(200).send("Edit SUccessfully");
  } catch (error) {
    console.log(error);
    res.status(500).json(error);
  }
};

const addTransaction = async (req, res) => {
  try {
    const { userId, Category, ...rest } = req.body;
    if (!userId) {
      return res.status(400).json({ error: "userId is required in body" });
    }
    const user = await User.findById(userId);
    const categoryToAdd = Array.isArray(Category) ? Category[0] : Category;
    if (user && !user.categories.includes(categoryToAdd)) {
      user.categories.push(categoryToAdd);
      await user.save();
    }
    const transactionData = {
      ...rest,
      userid: userId,
      Category: categoryToAdd,
    };
    const newTransaction = new transactionModel(transactionData);
    await newTransaction.save();
    return res.status(201).send("Transaction Created");
  } catch (error) {
    console.error("Error creating transaction:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
};

module.exports = {
  getAllTransaction,
  addTransaction,
  editTransaction,
  deleteTransaction,
};
